/*
* generated by Xtext
*/
package org.correttouml.grammars.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class StateMachineActionsGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cActionActionParserRuleCall_0_0 = (RuleCall)cActionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cActionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cActionsModelParserRuleCall_1_1_0 = (RuleCall)cActionsAssignment_1_1.eContents().get(0);
		
		//Model:
		//	action=Action ("," actions=Model)?;
		public ParserRule getRule() { return rule; }

		//action=Action ("," actions=Model)?
		public Group getGroup() { return cGroup; }

		//action=Action
		public Assignment getActionAssignment_0() { return cActionAssignment_0; }

		//Action
		public RuleCall getActionActionParserRuleCall_0_0() { return cActionActionParserRuleCall_0_0; }

		//("," actions=Model)?
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//actions=Model
		public Assignment getActionsAssignment_1_1() { return cActionsAssignment_1_1; }

		//Model
		public RuleCall getActionsModelParserRuleCall_1_1_0() { return cActionsModelParserRuleCall_1_1_0; }
	}

	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cAssignmentAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cAssignmentAssignmentParserRuleCall_0_0 = (RuleCall)cAssignmentAssignment_0.eContents().get(0);
		private final Assignment cEventActionAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cEventActionEventActionParserRuleCall_1_0 = (RuleCall)cEventActionAssignment_1.eContents().get(0);
		
		//Action:
		//	assignment=Assignment | eventAction=EventAction;
		public ParserRule getRule() { return rule; }

		//assignment=Assignment | eventAction=EventAction
		public Alternatives getAlternatives() { return cAlternatives; }

		//assignment=Assignment
		public Assignment getAssignmentAssignment_0() { return cAssignmentAssignment_0; }

		//Assignment
		public RuleCall getAssignmentAssignmentParserRuleCall_0_0() { return cAssignmentAssignmentParserRuleCall_0_0; }

		//eventAction=EventAction
		public Assignment getEventActionAssignment_1() { return cEventActionAssignment_1; }

		//EventAction
		public RuleCall getEventActionEventActionParserRuleCall_1_0() { return cEventActionEventActionParserRuleCall_1_0; }
	}

	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftvarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftvarIDTerminalRuleCall_0_0 = (RuleCall)cLeftvarAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionEXPRESSIONParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		/// * 
		// * This is replicated in eu.mades.assignment because I did not found a way
		// * to make cross references between grammars
		// * / Assignment:
		//	leftvar=ID "=" expression=EXPRESSION;
		public ParserRule getRule() { return rule; }

		//leftvar=ID "=" expression=EXPRESSION
		public Group getGroup() { return cGroup; }

		//leftvar=ID
		public Assignment getLeftvarAssignment_0() { return cLeftvarAssignment_0; }

		//ID
		public RuleCall getLeftvarIDTerminalRuleCall_0_0() { return cLeftvarIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//expression=EXPRESSION
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//EXPRESSION
		public RuleCall getExpressionEXPRESSIONParserRuleCall_2_0() { return cExpressionEXPRESSIONParserRuleCall_2_0; }
	}

	public class EXPRESSIONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EXPRESSION");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cFirstTermAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cFirstTermTERMParserRuleCall_0_0_0 = (RuleCall)cFirstTermAssignment_0_0.eContents().get(0);
		private final Assignment cOperatorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOperatorOPERATORTerminalRuleCall_0_1_0 = (RuleCall)cOperatorAssignment_0_1.eContents().get(0);
		private final Assignment cSecondTermAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cSecondTermTERMParserRuleCall_0_2_0 = (RuleCall)cSecondTermAssignment_0_2.eContents().get(0);
		private final Assignment cAloneAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cAloneTERMParserRuleCall_1_0 = (RuleCall)cAloneAssignment_1.eContents().get(0);
		
		//EXPRESSION:
		//	firstTerm=TERM operator=OPERATOR secondTerm=TERM | alone=TERM;
		public ParserRule getRule() { return rule; }

		//firstTerm=TERM operator=OPERATOR secondTerm=TERM | alone=TERM
		public Alternatives getAlternatives() { return cAlternatives; }

		//firstTerm=TERM operator=OPERATOR secondTerm=TERM
		public Group getGroup_0() { return cGroup_0; }

		//firstTerm=TERM
		public Assignment getFirstTermAssignment_0_0() { return cFirstTermAssignment_0_0; }

		//TERM
		public RuleCall getFirstTermTERMParserRuleCall_0_0_0() { return cFirstTermTERMParserRuleCall_0_0_0; }

		//operator=OPERATOR
		public Assignment getOperatorAssignment_0_1() { return cOperatorAssignment_0_1; }

		//OPERATOR
		public RuleCall getOperatorOPERATORTerminalRuleCall_0_1_0() { return cOperatorOPERATORTerminalRuleCall_0_1_0; }

		//secondTerm=TERM
		public Assignment getSecondTermAssignment_0_2() { return cSecondTermAssignment_0_2; }

		//TERM
		public RuleCall getSecondTermTERMParserRuleCall_0_2_0() { return cSecondTermTERMParserRuleCall_0_2_0; }

		//alone=TERM
		public Assignment getAloneAssignment_1() { return cAloneAssignment_1; }

		//TERM
		public RuleCall getAloneTERMParserRuleCall_1_0() { return cAloneTERMParserRuleCall_1_0; }
	}

	public class TERMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TERM");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cVariableIDTerminalRuleCall_0_0 = (RuleCall)cVariableAssignment_0.eContents().get(0);
		private final Assignment cConstantAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cConstantINTTerminalRuleCall_1_0 = (RuleCall)cConstantAssignment_1.eContents().get(0);
		
		//TERM:
		//	variable=ID | constant=INT;
		public ParserRule getRule() { return rule; }

		//variable=ID | constant=INT
		public Alternatives getAlternatives() { return cAlternatives; }

		//variable=ID
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }

		//ID
		public RuleCall getVariableIDTerminalRuleCall_0_0() { return cVariableIDTerminalRuleCall_0_0; }

		//constant=INT
		public Assignment getConstantAssignment_1() { return cConstantAssignment_1; }

		//INT
		public RuleCall getConstantINTTerminalRuleCall_1_0() { return cConstantINTTerminalRuleCall_1_0; }
	}

	public class EventActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cLinkNameAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cLinkNameIDTerminalRuleCall_1_0_0 = (RuleCall)cLinkNameAssignment_1_0.eContents().get(0);
		private final Assignment cSelfAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cSelfSelfKeyword_1_1_0 = (Keyword)cSelfAssignment_1_1.eContents().get(0);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEventNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEventNameIDTerminalRuleCall_3_0 = (RuleCall)cEventNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cParametersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cParametersParametersParserRuleCall_4_1_0 = (RuleCall)cParametersAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Keyword cFullStopKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cEventExtensionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cEventExtensionEventExtensionsParserRuleCall_6_0 = (RuleCall)cEventExtensionAssignment_6.eContents().get(0);
		
		//EventAction:
		//	"@" (linkName=ID | self="self")? "." eventName=ID ("(" parameters=Parameters ")")? "." eventExtension=EventExtensions;
		public ParserRule getRule() { return rule; }

		//"@" (linkName=ID | self="self")? "." eventName=ID ("(" parameters=Parameters ")")? "." eventExtension=EventExtensions
		public Group getGroup() { return cGroup; }

		//"@"
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }

		//(linkName=ID | self="self")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//linkName=ID
		public Assignment getLinkNameAssignment_1_0() { return cLinkNameAssignment_1_0; }

		//ID
		public RuleCall getLinkNameIDTerminalRuleCall_1_0_0() { return cLinkNameIDTerminalRuleCall_1_0_0; }

		//self="self"
		public Assignment getSelfAssignment_1_1() { return cSelfAssignment_1_1; }

		//"self"
		public Keyword getSelfSelfKeyword_1_1_0() { return cSelfSelfKeyword_1_1_0; }

		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }

		//eventName=ID
		public Assignment getEventNameAssignment_3() { return cEventNameAssignment_3; }

		//ID
		public RuleCall getEventNameIDTerminalRuleCall_3_0() { return cEventNameIDTerminalRuleCall_3_0; }

		//("(" parameters=Parameters ")")?
		public Group getGroup_4() { return cGroup_4; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }

		//parameters=Parameters
		public Assignment getParametersAssignment_4_1() { return cParametersAssignment_4_1; }

		//Parameters
		public RuleCall getParametersParametersParserRuleCall_4_1_0() { return cParametersParametersParserRuleCall_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_2() { return cRightParenthesisKeyword_4_2; }

		//"."
		public Keyword getFullStopKeyword_5() { return cFullStopKeyword_5; }

		//eventExtension=EventExtensions
		public Assignment getEventExtensionAssignment_6() { return cEventExtensionAssignment_6; }

		//EventExtensions
		public RuleCall getEventExtensionEventExtensionsParserRuleCall_6_0() { return cEventExtensionEventExtensionsParserRuleCall_6_0; }
	}

	public class ParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameters");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cParamAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cParamIDTerminalRuleCall_0_0 = (RuleCall)cParamAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cParamAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cParamIDTerminalRuleCall_1_0_0 = (RuleCall)cParamAssignment_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cParametersAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cParametersParametersParserRuleCall_1_2_0 = (RuleCall)cParametersAssignment_1_2.eContents().get(0);
		
		//Parameters:
		//	param=ID | param=ID "," parameters=Parameters;
		public ParserRule getRule() { return rule; }

		//param=ID | param=ID "," parameters=Parameters
		public Alternatives getAlternatives() { return cAlternatives; }

		//param=ID
		public Assignment getParamAssignment_0() { return cParamAssignment_0; }

		//ID
		public RuleCall getParamIDTerminalRuleCall_0_0() { return cParamIDTerminalRuleCall_0_0; }

		//param=ID "," parameters=Parameters
		public Group getGroup_1() { return cGroup_1; }

		//param=ID
		public Assignment getParamAssignment_1_0() { return cParamAssignment_1_0; }

		//ID
		public RuleCall getParamIDTerminalRuleCall_1_0_0() { return cParamIDTerminalRuleCall_1_0_0; }

		//","
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }

		//parameters=Parameters
		public Assignment getParametersAssignment_1_2() { return cParametersAssignment_1_2; }

		//Parameters
		public RuleCall getParametersParametersParserRuleCall_1_2_0() { return cParametersParametersParserRuleCall_1_2_0; }
	}

	public class EventExtensionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventExtensions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cExitKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cEnterKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cStartKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cEndKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cTickKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cSigKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cCallKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		//EventExtensions:
		//	"exit" | "enter" | "start" | "end" | "tick" | "sig" | "call";
		public ParserRule getRule() { return rule; }

		//"exit" | "enter" | "start" | "end" | "tick" | "sig" | "call"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"exit"
		public Keyword getExitKeyword_0() { return cExitKeyword_0; }

		//"enter"
		public Keyword getEnterKeyword_1() { return cEnterKeyword_1; }

		//"start"
		public Keyword getStartKeyword_2() { return cStartKeyword_2; }

		//"end"
		public Keyword getEndKeyword_3() { return cEndKeyword_3; }

		//"tick"
		public Keyword getTickKeyword_4() { return cTickKeyword_4; }

		//"sig"
		public Keyword getSigKeyword_5() { return cSigKeyword_5; }

		//"call"
		public Keyword getCallKeyword_6() { return cCallKeyword_6; }
	}
	
	
	private ModelElements pModel;
	private ActionElements pAction;
	private AssignmentElements pAssignment;
	private EXPRESSIONElements pEXPRESSION;
	private TERMElements pTERM;
	private TerminalRule tOPERATOR;
	private EventActionElements pEventAction;
	private ParametersElements pParameters;
	private EventExtensionsElements pEventExtensions;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public StateMachineActionsGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.correttouml.grammars.StateMachineActions".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	action=Action ("," actions=Model)?;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Action:
	//	assignment=Assignment | eventAction=EventAction;
	public ActionElements getActionAccess() {
		return (pAction != null) ? pAction : (pAction = new ActionElements());
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}

	/// * 
	// * This is replicated in eu.mades.assignment because I did not found a way
	// * to make cross references between grammars
	// * / Assignment:
	//	leftvar=ID "=" expression=EXPRESSION;
	public AssignmentElements getAssignmentAccess() {
		return (pAssignment != null) ? pAssignment : (pAssignment = new AssignmentElements());
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//EXPRESSION:
	//	firstTerm=TERM operator=OPERATOR secondTerm=TERM | alone=TERM;
	public EXPRESSIONElements getEXPRESSIONAccess() {
		return (pEXPRESSION != null) ? pEXPRESSION : (pEXPRESSION = new EXPRESSIONElements());
	}
	
	public ParserRule getEXPRESSIONRule() {
		return getEXPRESSIONAccess().getRule();
	}

	//TERM:
	//	variable=ID | constant=INT;
	public TERMElements getTERMAccess() {
		return (pTERM != null) ? pTERM : (pTERM = new TERMElements());
	}
	
	public ParserRule getTERMRule() {
		return getTERMAccess().getRule();
	}

	//terminal OPERATOR:
	//	"-" | "+" | "*";
	public TerminalRule getOPERATORRule() {
		return (tOPERATOR != null) ? tOPERATOR : (tOPERATOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OPERATOR"));
	} 

	//EventAction:
	//	"@" (linkName=ID | self="self")? "." eventName=ID ("(" parameters=Parameters ")")? "." eventExtension=EventExtensions;
	public EventActionElements getEventActionAccess() {
		return (pEventAction != null) ? pEventAction : (pEventAction = new EventActionElements());
	}
	
	public ParserRule getEventActionRule() {
		return getEventActionAccess().getRule();
	}

	//Parameters:
	//	param=ID | param=ID "," parameters=Parameters;
	public ParametersElements getParametersAccess() {
		return (pParameters != null) ? pParameters : (pParameters = new ParametersElements());
	}
	
	public ParserRule getParametersRule() {
		return getParametersAccess().getRule();
	}

	//EventExtensions:
	//	"exit" | "enter" | "start" | "end" | "tick" | "sig" | "call";
	public EventExtensionsElements getEventExtensionsAccess() {
		return (pEventExtensions != null) ? pEventExtensions : (pEventExtensions = new EventExtensionsElements());
	}
	
	public ParserRule getEventExtensionsRule() {
		return getEventExtensionsAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
